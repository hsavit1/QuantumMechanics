/*
Header file for QuantumMechanics::GreensFormalism::GreensSolver: 

This file solves a list of one or more matrices stored in a c-style array, stl-style vector,
or a return from a function(int). When not using vector (or a single matrix) the 

---
Copyright (C) 2014, Søren Schou Gregersen <sorge@nanotech.dtu.dk>
 */
#ifndef _GREENSFORMALISM_GREENSSOLVER_H_
#define _GREENSFORMALISM_GREENSSOLVER_H_

#include "../Misc/MatrixSolverAbstract"
#include "../Misc/LoggingObject"
#include "../Misc/FeedbackObject"


#include "../Misc/MatrixListSolver"

namespace QuantumMechanics {

namespace GreensFormalism {

	enum GreenMatrixSubType {
		FullMatrix,
		FirstBlock,
		LastBlock,
		FirstBlockColumn,
		LastBlockColumn
	};
	
class GreensSolver : public MatrixSolverAbstract<MatrixXcd, MatrixXcd, GreenMatrixSubType> {

	MatrixXcd reduced_sigma;

public:
	GreensSolver() : MatrixSolverAbstract() { }

	GreensSolver(const MatrixXcd &M) : MatrixSolverAbstract(M) { }

	GreensSolver(const MatrixXcd &M, const size_t &size) : MatrixSolverAbstract(M, size) { }

	static LoggingObject log;

protected:
	void compute_full_matrix() 
	{
		solution() = input().inverse();
	}

	void compute_last_block()
	{
		if (!blockMatrix())
		{
			log() << "Found no blocks, will use the full matrix and invert." << std::endl;
			solution() = input().inverse();
			return;
		}

		const long block_count = blockCount();

		log() << "Preparing to calculate the last block out of " << block_count << "-by-" << block_count << " blocks." << std::endl;

		MatrixXcd &sigma = reduced_sigma;
		sigma = zeroBlock<MatrixXcd>(0, 0);

		log() << "The algorithm wil recursively find the self-energy of the left cells." << std::endl;

		for (long b = 0; b < block_count - 1; b++)
			sigma = block(input(),b + 1, b) * (block(input(),b, b) - sigma).inverse() * block(input(),b, b + 1);

		log() << "The final self-energy became:" << std::endl << std::endl << sigma << std::endl << std::endl;

		solution() = (block(input(),-1, -1) - sigma).inverse();

		log() << "The solution is saved." << std::endl;
	}
	
	void compute_first_block() 
	{		
		if (!blockMatrix())
		{
			log() << "Found no blocks, will use the full matrix and invert." << std::endl;
			solution() = input().inverse();
			return;
		}

		const long block_count = blockCount();

		log() << "Preparing to calculate the first block out of " << block_count << "-by-" << block_count << " blocks." << std::endl;

		MatrixXcd &sigma = reduced_sigma;
		sigma = zeroBlock<MatrixXcd>(-1, -1);

		log() << "The algorithm wil recursively find the self-energy of the right cells." << std::endl;

		for (long b = -1; b >= -(block_count - 1); b--)
			sigma = block(input(), b - 1, b) * (block(input(), b, b) - sigma).inverse() * block(input(), b, b - 1);

		log() << "The final self-energy became:" << std::endl << std::endl << sigma << std::endl << std::endl;

		solution() = (block(input(), 0, 0) - sigma).inverse();

		log() << "The solution is saved." << std::endl;
	}
	
	void compute_first_block_column() 
	{
		if (!blockMatrix())
		{
			log() << "Found no blocks, will use the full matrix and invert." << std::endl;
			solution() = input().inverse();
			return;
		}

		const long block_count = blockCount();

		log() << "Preparing to calculate the first block column out of " << block_count << "-by-" << block_count << " blocks." << std::endl;

		std::vector<MatrixXcd> g(block_count, MatrixXcd());
		MatrixXcd &sigma = reduced_sigma;
		sigma = zeroBlock<MatrixXcd>(-1, -1);

		log() << "The algorithm wil recursively find the self-energy of the right cells while saving intermediate isolated greens matrices." << std::endl;

		for (long b = -1; b >= -block_count; b--)
		{
			g[-b-1] = (block(input(), b, b) - sigma).inverse();

			if (b > -block_count)
				sigma = block(input(), b - 1, b) * g[-b-1] * block(input(), b, b - 1);
		}

		log() << "The final self-energy became:" << std::endl << std::endl << sigma << std::endl << std::endl;

		solution() = zeroBlockRange<MatrixXcd>(0, 0, block_count, 1);

		log() << "The solution is calculated from the intermediate greens matrices. Block 0 is already finished." << std::endl;

		blockRow(solution(), 0) = g[block_count - 1];


		for (long b = 1; b < block_count; b++)
		{
			log() << "Block "<< b << " is calculated." << std::endl;
			blockRow(solution(), b) = - g[block_count - 1 - b] * block(input(), b - 1, b) * blockRow(solution(), b - 1);
		}

		log() << "The solution is finished." << std::endl;
	}

	void compute_last_block_column()
	{
		if (!blockMatrix())
		{
			log() << "Found no blocks, will use the full matrix and invert." << std::endl;
			solution() = input().inverse();
			return;
		}

		const long block_count = blockCount();

		log() << "Preparing to calculate the last block column out of " << block_count << "-by-" << block_count << " blocks." << std::endl;

		std::vector<MatrixXcd> g(block_count - 1, MatrixXcd());
		MatrixXcd &sigma = reduced_sigma;
		sigma = zeroBlock<MatrixXcd>(0, 0);

		log() << "The algorithm wil recursively find the self-energy of the right cells while saving intermediate isolated greens matrices." << std::endl;

		for (long b = 0; b < block_count - 1; b++)
		{
			g[b] = (block(input(), b, b) - sigma).inverse();
			sigma = block(input(), b + 1, b) * g[b] * block(input(), b, b + 1);
		}

		log() << "The final self-energy became:" << std::endl << std::endl << sigma << std::endl << std::endl;

		solution() = zeroBlockRange<MatrixXcd>(0, -1, block_count, 1);

		log() << "The solution is calculated from the intermediate greens matrices. Block 0 is already finished." << std::endl;

		blockRow(solution(), -1) = (block(input(), -1, -1) - sigma).inverse();

		for (long b = -2; b >= -block_count; b--)
		{	
			log() << "Block "<< -b - 1 << " is calculated." << std::endl;	
			blockRow(solution(), b) = - g[block_count + b] * block(input(), b, b + 1) * blockRow(solution(), b + 1);
		}

		log() << "The solution is finished." << std::endl;
	}
	
public:
	void compute(const GreenMatrixSubType &action)
	{
		switch(action)
		{
		case FullMatrix:
			compute_full_matrix();
			break;
		case FirstBlock:
			compute_first_block();
			break;
		case LastBlock:
			compute_last_block();
			break;
		case FirstBlockColumn:
			compute_first_block_column();
			break;
		case LastBlockColumn:
			compute_last_block_column();
			break;
		}
	}

	void compute(GreenMatrixSubType action, const ArrayXi &sizes)
	{
		setBlockSizes(sizes);
		compute(action);
	}

	const MatrixXcd &reducedSigma() {
		return reduced_sigma;
	}
};

LoggingObject GreensSolver::log("GreensFormalism::GreensSolver", false);

typedef MatrixListSolver<GreensSolver> GreensListSolver;

}

}


#endif  
