#
# 'make'        build executable file 'mycc'
# 'make clean'  removes all .o and executable files
#

# define the C compiler to use
CC = icl

# define any compile-time flags
CFLAGS = /Qstd=c++11

# define any libraries to link into executable:
#   if I want to link in libraries (libx.so or libx.a) I use the -llibname 
#   option, something like (this will link in libmylib.so and libm.so:
LIBS = /Qmkl /Qtbb

# define library paths in addition to /usr/lib
#   if I wanted to include libraries not in /usr/lib I'd specify
#   their path using -Lpath, something like:
LFLAGS = 

# define any directories containing header files other than /usr/include
INCLUDES = -I../ -I../include/ 

#
# The following part of the makefile is generic; it can be used to 
# build any executable just by changing the definitions above and by
# deleting dependencies appended to the file from 'make depend'
#

# define the executable file 
MAIN = $(SRCS:%.cpp=%.exe)

DEPDIR = deps
DEPEXT = dep
DEPS = $(SRCS:%.cpp=$(DEPDIR)/%.$(DEPEXT))
OBJDIR = obj
OBJS = $(SRCS:%.cpp=$(OBJDIR)/%.obj)

.PHONY: clean

all:    $(MAIN)
	@echo  Executable \'$(MAIN)\' has been compiled.

$(MAIN): %.exe : $(OBJDIR)/%.obj
	$(CC) $(CFLAGS) $(INCLUDES) $(LIBS) $(LFLAGS) /Fe$@ $<


$(OBJS): $(OBJDIR)/%.obj : %.cpp makefile | $(OBJDIR) $(DEPDIR)
	$(CC) $(CFLAGS) $(INCLUDES) $(LIBS) $(LFLAGS) /QMMD /QMF$(<:%.cpp=$(DEPDIR)/%.$(DEPEXT)) /c /Fo$@ $<

$(OBJDIR):
	@mkdir -p $(OBJDIR)

$(DEPDIR):
	@mkdir -p $(DEPDIR)

clean:
	$(RM) *~ *.bak $(OBJS) $(DEPS) $(MAIN)
	@rmdir $(OBJDIR) $(DEPDIR)

#include $(<:%.cpp=$(DEPDIR)\\%.$(DEPEXT))
